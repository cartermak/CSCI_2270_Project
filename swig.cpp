/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


    #include "project.hpp"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int_Sg__doSize(std::vector< int > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_0(std::vector< int > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_1(std::vector< int > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doRemove(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__doGet(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doSet(std::vector< int > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__doRemoveRange(std::vector< int > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(jint count,double const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< double >(static_cast<std::vector< double >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_double_Sg__doSize(std::vector< double > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_double_Sg__doAdd__SWIG_0(std::vector< double > *self,std::vector< double >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_double_Sg__doAdd__SWIG_1(std::vector< double > *self,jint index,std::vector< double >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__doRemove(std::vector< double > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          double const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__doGet(std::vector< double > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__doSet(std::vector< double > *self,jint index,std::vector< double >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          double const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__doRemoveRange(std::vector< double > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part > *new_std_vector_Sl_Part_Sg___SWIG_2(jint count,Part const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Part >(static_cast<std::vector< Part >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Part_Sg__doSize(std::vector< Part > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Part_Sg__doAdd__SWIG_0(std::vector< Part > *self,std::vector< Part >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Part_Sg__doAdd__SWIG_1(std::vector< Part > *self,jint index,std::vector< Part >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part >::value_type std_vector_Sl_Part_Sg__doRemove(std::vector< Part > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Part const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part >::value_type const &std_vector_Sl_Part_Sg__doGet(std::vector< Part > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Part >::value_type std_vector_Sl_Part_Sg__doSet(std::vector< Part > *self,jint index,std::vector< Part >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Part const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Part_Sg__doRemoveRange(std::vector< Part > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement > *new_std_vector_Sl_Replacement_Sg___SWIG_2(jint count,Replacement const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Replacement >(static_cast<std::vector< Replacement >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Replacement_Sg__doSize(std::vector< Replacement > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Replacement_Sg__doAdd__SWIG_0(std::vector< Replacement > *self,std::vector< Replacement >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Replacement_Sg__doAdd__SWIG_1(std::vector< Replacement > *self,jint index,std::vector< Replacement >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement >::value_type std_vector_Sl_Replacement_Sg__doRemove(std::vector< Replacement > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Replacement const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement >::value_type const &std_vector_Sl_Replacement_Sg__doGet(std::vector< Replacement > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Replacement >::value_type std_vector_Sl_Replacement_Sg__doSet(std::vector< Replacement > *self,jint index,std::vector< Replacement >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Replacement const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Replacement_Sg__doRemoveRange(std::vector< Replacement > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request > *new_std_vector_Sl_Request_Sg___SWIG_2(jint count,Request const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Request >(static_cast<std::vector< Request >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Request_Sg__doSize(std::vector< Request > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Request_Sg__doAdd__SWIG_0(std::vector< Request > *self,std::vector< Request >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Request_Sg__doAdd__SWIG_1(std::vector< Request > *self,jint index,std::vector< Request >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request >::value_type std_vector_Sl_Request_Sg__doRemove(std::vector< Request > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Request const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request >::value_type const &std_vector_Sl_Request_Sg__doGet(std::vector< Request > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Request >::value_type std_vector_Sl_Request_Sg__doSet(std::vector< Request > *self,jint index,std::vector< Request >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Request const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Request_Sg__doRemoveRange(std::vector< Request > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request * > *new_std_vector_Sl_Request_Sm__Sg___SWIG_2(jint count,Request *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Request * >(static_cast<std::vector< Request * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Request_Sm__Sg__doSize(std::vector< Request * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Request_Sm__Sg__doAdd__SWIG_0(std::vector< Request * > *self,std::vector< Request * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Request_Sm__Sg__doAdd__SWIG_1(std::vector< Request * > *self,jint index,std::vector< Request * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request * >::value_type std_vector_Sl_Request_Sm__Sg__doRemove(std::vector< Request * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Request * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Request * >::value_type const &std_vector_Sl_Request_Sm__Sg__doGet(std::vector< Request * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Request * >::value_type std_vector_Sl_Request_Sm__Sg__doSet(std::vector< Request * > *self,jint index,std::vector< Request * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Request * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Request_Sm__Sg__doRemoveRange(std::vector< Request * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part * > *new_std_vector_Sl_Part_Sm__Sg___SWIG_2(jint count,Part *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Part * >(static_cast<std::vector< Part * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Part_Sm__Sg__doSize(std::vector< Part * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Part_Sm__Sg__doAdd__SWIG_0(std::vector< Part * > *self,std::vector< Part * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Part_Sm__Sg__doAdd__SWIG_1(std::vector< Part * > *self,jint index,std::vector< Part * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part * >::value_type std_vector_Sl_Part_Sm__Sg__doRemove(std::vector< Part * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Part * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Part * >::value_type const &std_vector_Sl_Part_Sm__Sg__doGet(std::vector< Part * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Part * >::value_type std_vector_Sl_Part_Sm__Sg__doSet(std::vector< Part * > *self,jint index,std::vector< Part * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Part * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Part_Sm__Sg__doRemoveRange(std::vector< Part * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement * > *new_std_vector_Sl_Replacement_Sm__Sg___SWIG_2(jint count,Replacement *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Replacement * >(static_cast<std::vector< Replacement * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Replacement_Sm__Sg__doSize(std::vector< Replacement * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Replacement_Sm__Sg__doAdd__SWIG_0(std::vector< Replacement * > *self,std::vector< Replacement * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Replacement_Sm__Sg__doAdd__SWIG_1(std::vector< Replacement * > *self,jint index,std::vector< Replacement * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement * >::value_type std_vector_Sl_Replacement_Sm__Sg__doRemove(std::vector< Replacement * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Replacement * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Replacement * >::value_type const &std_vector_Sl_Replacement_Sm__Sg__doGet(std::vector< Replacement * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Replacement * >::value_type std_vector_Sl_Replacement_Sm__Sg__doSet(std::vector< Replacement * > *self,jint index,std::vector< Replacement * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Replacement * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Replacement_Sm__Sg__doRemoveRange(std::vector< Replacement * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1IntVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_IntVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  try {
    result = std_vector_Sl_int_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_IntVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_IntVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__doAdd__SWIG_1(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_IntVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_IntVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_IntVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doSet(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_IntVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1DoubleVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1,(double const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_DoubleVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  try {
    result = std_vector_Sl_double_Sg__doSize((std::vector< double > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_DoubleVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_double_Sg__doAdd__SWIG_0(arg1,(double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_DoubleVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__doAdd__SWIG_1(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jdouble JNICALL Java_mypackage_testJNI_DoubleVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mypackage_testJNI_DoubleVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mypackage_testJNI_DoubleVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  std::vector< double >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__doSet(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_DoubleVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_double_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Part > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Part > *)new std::vector< Part >();
  *(std::vector< Part > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Part > *arg1 = 0 ;
  std::vector< Part > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part > const & reference is null");
    return 0;
  } 
  result = (std::vector< Part > *)new std::vector< Part >((std::vector< Part > const &)*arg1);
  *(std::vector< Part > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  std::vector< Part >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  result = ((std::vector< Part > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  std::vector< Part >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = (std::vector< Part >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_PartVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  result = (bool)((std::vector< Part > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Part *arg2 = 0 ;
  std::vector< Part > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(Part **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Part const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< Part > *)new_std_vector_Sl_Part_Sg___SWIG_2(arg1,(Part const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_PartVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  try {
    result = std_vector_Sl_Part_Sg__doSize((std::vector< Part > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  std::vector< Part >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = *(std::vector< Part >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_Part_Sg__doAdd__SWIG_0(arg1,(Part const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint arg2 ;
  std::vector< Part >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Part >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Part_Sg__doAdd__SWIG_1(arg1,arg2,(Part const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint arg2 ;
  std::vector< Part >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_Part_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part >::value_type **)&jresult = new std::vector< Part >::value_type((const std::vector< Part >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint arg2 ;
  std::vector< Part >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Part >::value_type *) &std_vector_Sl_Part_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint arg2 ;
  std::vector< Part >::value_type *arg3 = 0 ;
  std::vector< Part >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Part >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_Part_Sg__doSet(arg1,arg2,(Part const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part >::value_type **)&jresult = new std::vector< Part >::value_type((const std::vector< Part >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Part_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1PartVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Part > *arg1 = (std::vector< Part > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Part > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Replacement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Replacement > *)new std::vector< Replacement >();
  *(std::vector< Replacement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Replacement > *arg1 = 0 ;
  std::vector< Replacement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement > const & reference is null");
    return 0;
  } 
  result = (std::vector< Replacement > *)new std::vector< Replacement >((std::vector< Replacement > const &)*arg1);
  *(std::vector< Replacement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  std::vector< Replacement >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  result = ((std::vector< Replacement > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  std::vector< Replacement >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = (std::vector< Replacement >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_ReplacementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  result = (bool)((std::vector< Replacement > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Replacement *arg2 = 0 ;
  std::vector< Replacement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(Replacement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Replacement const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< Replacement > *)new_std_vector_Sl_Replacement_Sg___SWIG_2(arg1,(Replacement const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_ReplacementVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  try {
    result = std_vector_Sl_Replacement_Sg__doSize((std::vector< Replacement > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  std::vector< Replacement >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = *(std::vector< Replacement >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_Replacement_Sg__doAdd__SWIG_0(arg1,(Replacement const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint arg2 ;
  std::vector< Replacement >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Replacement >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Replacement_Sg__doAdd__SWIG_1(arg1,arg2,(Replacement const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint arg2 ;
  std::vector< Replacement >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_Replacement_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement >::value_type **)&jresult = new std::vector< Replacement >::value_type((const std::vector< Replacement >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint arg2 ;
  std::vector< Replacement >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Replacement >::value_type *) &std_vector_Sl_Replacement_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint arg2 ;
  std::vector< Replacement >::value_type *arg3 = 0 ;
  std::vector< Replacement >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Replacement >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_Replacement_Sg__doSet(arg1,arg2,(Replacement const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement >::value_type **)&jresult = new std::vector< Replacement >::value_type((const std::vector< Replacement >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Replacement_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1ReplacementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Replacement > *arg1 = (std::vector< Replacement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Replacement > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Request > *)new std::vector< Request >();
  *(std::vector< Request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Request > *arg1 = 0 ;
  std::vector< Request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request > const & reference is null");
    return 0;
  } 
  result = (std::vector< Request > *)new std::vector< Request >((std::vector< Request > const &)*arg1);
  *(std::vector< Request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  std::vector< Request >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  result = ((std::vector< Request > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  std::vector< Request >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = (std::vector< Request >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_RequestVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  result = (bool)((std::vector< Request > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Request *arg2 = 0 ;
  std::vector< Request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(Request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Request const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< Request > *)new_std_vector_Sl_Request_Sg___SWIG_2(arg1,(Request const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_RequestVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  try {
    result = std_vector_Sl_Request_Sg__doSize((std::vector< Request > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  std::vector< Request >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = *(std::vector< Request >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_Request_Sg__doAdd__SWIG_0(arg1,(Request const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint arg2 ;
  std::vector< Request >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Request >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Request_Sg__doAdd__SWIG_1(arg1,arg2,(Request const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint arg2 ;
  std::vector< Request >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_Request_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request >::value_type **)&jresult = new std::vector< Request >::value_type((const std::vector< Request >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint arg2 ;
  std::vector< Request >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Request >::value_type *) &std_vector_Sl_Request_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint arg2 ;
  std::vector< Request >::value_type *arg3 = 0 ;
  std::vector< Request >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Request >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_Request_Sg__doSet(arg1,arg2,(Request const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request >::value_type **)&jresult = new std::vector< Request >::value_type((const std::vector< Request >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Request_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1RequestVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Request > *arg1 = (std::vector< Request > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Request > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestPVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Request * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Request * > *)new std::vector< Request * >();
  *(std::vector< Request * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestPVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Request * > *arg1 = 0 ;
  std::vector< Request * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request * > const & reference is null");
    return 0;
  } 
  result = (std::vector< Request * > *)new std::vector< Request * >((std::vector< Request * > const &)*arg1);
  *(std::vector< Request * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestPVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  std::vector< Request * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  result = ((std::vector< Request * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestPVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  std::vector< Request * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = (std::vector< Request * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_RequestPVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  result = (bool)((std::vector< Request * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestPVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1RequestPVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Request **arg2 = 0 ;
  Request *temp2 = 0 ;
  std::vector< Request * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(Request **)&jarg2;
  arg2 = (Request **)&temp2; 
  try {
    result = (std::vector< Request * > *)new_std_vector_Sl_Request_Sm__Sg___SWIG_2(arg1,(Request *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_RequestPVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  try {
    result = std_vector_Sl_Request_Sm__Sg__doSize((std::vector< Request * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestPVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  std::vector< Request * >::value_type *arg2 = 0 ;
  std::vector< Request * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  temp2 = *(std::vector< Request * >::value_type *)&jarg2;
  arg2 = (std::vector< Request * >::value_type *)&temp2; 
  std_vector_Sl_Request_Sm__Sg__doAdd__SWIG_0(arg1,(Request *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestPVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint arg2 ;
  std::vector< Request * >::value_type *arg3 = 0 ;
  std::vector< Request * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Request * >::value_type *)&jarg3;
  arg3 = (std::vector< Request * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Request_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(Request *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestPVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint arg2 ;
  std::vector< Request * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Request * >::value_type)std_vector_Sl_Request_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestPVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint arg2 ;
  std::vector< Request * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Request * >::value_type *) &std_vector_Sl_Request_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_RequestPVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint arg2 ;
  std::vector< Request * >::value_type *arg3 = 0 ;
  std::vector< Request * >::value_type temp3 = 0 ;
  std::vector< Request * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Request * >::value_type *)&jarg3;
  arg3 = (std::vector< Request * >::value_type *)&temp3; 
  try {
    result = (std::vector< Request * >::value_type)std_vector_Sl_Request_Sm__Sg__doSet(arg1,arg2,(Request *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Request * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_RequestPVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Request_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1RequestPVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Request * > *arg1 = (std::vector< Request * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Request * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartPVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Part * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Part * > *)new std::vector< Part * >();
  *(std::vector< Part * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartPVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Part * > *arg1 = 0 ;
  std::vector< Part * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part * > const & reference is null");
    return 0;
  } 
  result = (std::vector< Part * > *)new std::vector< Part * >((std::vector< Part * > const &)*arg1);
  *(std::vector< Part * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartPVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  std::vector< Part * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  result = ((std::vector< Part * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartPVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  std::vector< Part * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = (std::vector< Part * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_PartPVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  result = (bool)((std::vector< Part * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartPVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1PartPVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Part **arg2 = 0 ;
  Part *temp2 = 0 ;
  std::vector< Part * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(Part **)&jarg2;
  arg2 = (Part **)&temp2; 
  try {
    result = (std::vector< Part * > *)new_std_vector_Sl_Part_Sm__Sg___SWIG_2(arg1,(Part *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_PartPVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  try {
    result = std_vector_Sl_Part_Sm__Sg__doSize((std::vector< Part * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartPVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  std::vector< Part * >::value_type *arg2 = 0 ;
  std::vector< Part * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  temp2 = *(std::vector< Part * >::value_type *)&jarg2;
  arg2 = (std::vector< Part * >::value_type *)&temp2; 
  std_vector_Sl_Part_Sm__Sg__doAdd__SWIG_0(arg1,(Part *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartPVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint arg2 ;
  std::vector< Part * >::value_type *arg3 = 0 ;
  std::vector< Part * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Part * >::value_type *)&jarg3;
  arg3 = (std::vector< Part * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Part_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(Part *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartPVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint arg2 ;
  std::vector< Part * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Part * >::value_type)std_vector_Sl_Part_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartPVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint arg2 ;
  std::vector< Part * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Part * >::value_type *) &std_vector_Sl_Part_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_PartPVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint arg2 ;
  std::vector< Part * >::value_type *arg3 = 0 ;
  std::vector< Part * >::value_type temp3 = 0 ;
  std::vector< Part * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Part * >::value_type *)&jarg3;
  arg3 = (std::vector< Part * >::value_type *)&temp3; 
  try {
    result = (std::vector< Part * >::value_type)std_vector_Sl_Part_Sm__Sg__doSet(arg1,arg2,(Part *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Part * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_PartPVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Part_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1PartPVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Part * > *arg1 = (std::vector< Part * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Part * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementPVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Replacement * > *)new std::vector< Replacement * >();
  *(std::vector< Replacement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementPVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *arg1 = 0 ;
  std::vector< Replacement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement * > const & reference is null");
    return 0;
  } 
  result = (std::vector< Replacement * > *)new std::vector< Replacement * >((std::vector< Replacement * > const &)*arg1);
  *(std::vector< Replacement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementPVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  std::vector< Replacement * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  result = ((std::vector< Replacement * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementPVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  std::vector< Replacement * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = (std::vector< Replacement * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_ReplacementPVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  result = (bool)((std::vector< Replacement * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementPVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1ReplacementPVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Replacement **arg2 = 0 ;
  Replacement *temp2 = 0 ;
  std::vector< Replacement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(Replacement **)&jarg2;
  arg2 = (Replacement **)&temp2; 
  try {
    result = (std::vector< Replacement * > *)new_std_vector_Sl_Replacement_Sm__Sg___SWIG_2(arg1,(Replacement *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_ReplacementPVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  try {
    result = std_vector_Sl_Replacement_Sm__Sg__doSize((std::vector< Replacement * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementPVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  std::vector< Replacement * >::value_type *arg2 = 0 ;
  std::vector< Replacement * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  temp2 = *(std::vector< Replacement * >::value_type *)&jarg2;
  arg2 = (std::vector< Replacement * >::value_type *)&temp2; 
  std_vector_Sl_Replacement_Sm__Sg__doAdd__SWIG_0(arg1,(Replacement *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementPVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint arg2 ;
  std::vector< Replacement * >::value_type *arg3 = 0 ;
  std::vector< Replacement * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Replacement * >::value_type *)&jarg3;
  arg3 = (std::vector< Replacement * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Replacement_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(Replacement *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementPVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint arg2 ;
  std::vector< Replacement * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Replacement * >::value_type)std_vector_Sl_Replacement_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementPVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint arg2 ;
  std::vector< Replacement * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Replacement * >::value_type *) &std_vector_Sl_Replacement_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_ReplacementPVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint arg2 ;
  std::vector< Replacement * >::value_type *arg3 = 0 ;
  std::vector< Replacement * >::value_type temp3 = 0 ;
  std::vector< Replacement * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< Replacement * >::value_type *)&jarg3;
  arg3 = (std::vector< Replacement * >::value_type *)&temp3; 
  try {
    result = (std::vector< Replacement * >::value_type)std_vector_Sl_Replacement_Sm__Sg__doSet(arg1,arg2,(Replacement *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Replacement * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_ReplacementPVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Replacement_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1ReplacementPVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Replacement * > *arg1 = (std::vector< Replacement * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Replacement * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_getCurrentTime(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  result = (time_t)getCurrentTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1strmod_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (strmod *)new strmod();
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1strmod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (strmod *)new strmod(arg1);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1strmod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  strmod *arg1 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(strmod **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_strmod_1setStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  strmod *arg1 = (strmod *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(strmod **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setStr(arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_strmod_1apdStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  strmod *arg1 = (strmod *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(strmod **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->apdStr(arg2);
}


SWIGEXPORT jstring JNICALL Java_mypackage_testJNI_strmod_1getStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  strmod *arg1 = (strmod *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(strmod **)&jarg1; 
  result = (arg1)->getStr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Replacement_1numOff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Replacement *arg1 = (Replacement *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numOff = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Replacement_1numOff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Replacement *arg1 = (Replacement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  result = (int) ((arg1)->numOff);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Replacement_1numOn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Replacement *arg1 = (Replacement *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numOn = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Replacement_1numOn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Replacement *arg1 = (Replacement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  result = (int) ((arg1)->numOn);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Replacement_1date_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Replacement *arg1 = (Replacement *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->date = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Replacement_1date_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Replacement *arg1 = (Replacement *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  result = (time_t) ((arg1)->date);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Replacement_1mechanic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Replacement *arg1 = (Replacement *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Replacement **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->mechanic = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Replacement_1mechanic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Replacement *arg1 = (Replacement *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  result = (strmod *)& ((arg1)->mechanic);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Replacement_1notes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Replacement *arg1 = (Replacement *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Replacement **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->notes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Replacement_1notes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Replacement *arg1 = (Replacement *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Replacement **)&jarg1; 
  result = (strmod *)& ((arg1)->notes);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Replacement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Replacement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Replacement *)new Replacement();
  *(Replacement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Replacement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  time_t arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  Replacement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (time_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (Replacement *)new Replacement(arg1,arg2,arg3,arg4,arg5);
  *(Replacement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1Replacement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Replacement *arg1 = (Replacement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Replacement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_MachinePart_1partNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MachinePart *arg1 = (MachinePart *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MachinePart **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->partNum = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_MachinePart_1partNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MachinePart *arg1 = (MachinePart *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MachinePart **)&jarg1; 
  result = (int) ((arg1)->partNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_MachinePart_1notes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MachinePart *arg1 = (MachinePart *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MachinePart **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->notes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_MachinePart_1notes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MachinePart *arg1 = (MachinePart *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MachinePart **)&jarg1; 
  result = (strmod *)& ((arg1)->notes);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_MachinePart_1replacements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MachinePart *arg1 = (MachinePart *) 0 ;
  std::vector< Replacement > *arg2 = (std::vector< Replacement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MachinePart **)&jarg1; 
  arg2 = *(std::vector< Replacement > **)&jarg2; 
  if (arg1) (arg1)->replacements = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_MachinePart_1replacements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MachinePart *arg1 = (MachinePart *) 0 ;
  std::vector< Replacement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MachinePart **)&jarg1; 
  result = (std::vector< Replacement > *)& ((arg1)->replacements);
  *(std::vector< Replacement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1MachinePart(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MachinePart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MachinePart *)new MachinePart();
  *(MachinePart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1MachinePart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MachinePart *arg1 = (MachinePart *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MachinePart **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1dateRequested_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->dateRequested = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1dateRequested_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (time_t) ((arg1)->dateRequested);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1dateOrdered_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->dateOrdered = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1dateOrdered_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (time_t) ((arg1)->dateOrdered);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1dateFulfilled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->dateFulfilled = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1dateFulfilled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (time_t) ((arg1)->dateFulfilled);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1mechanic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Request *arg1 = (Request *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Request **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->mechanic = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Request_1mechanic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (strmod *)& ((arg1)->mechanic);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1notes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Request *arg1 = (Request *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Request **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->notes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Request_1notes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (strmod *)& ((arg1)->notes);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (int) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (int) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Request_1partNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Request *arg1 = (Request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->partNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Request_1partNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Request *arg1 = (Request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Request **)&jarg1; 
  result = (int) ((arg1)->partNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Request_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Request *)new Request();
  *(Request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Request_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jint jarg6, jint jarg7, jint jarg8) {
  jlong jresult = 0 ;
  time_t arg1 ;
  time_t arg2 ;
  time_t arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  Request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (time_t)jarg1; 
  arg2 = (time_t)jarg2; 
  arg3 = (time_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (Request *)new Request(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1Request(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Request *arg1 = (Request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Request **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_NUM_1OF_1MACHINES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_OF_MACHINES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_PART_1NAME_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PART_NAME_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1partNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Part *arg1 = (Part *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->partNum = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Part_1partNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (int) ((arg1)->partNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Part *arg1 = (Part *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Part_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (int) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Part *arg1 = (Part *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Part **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Part_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (strmod *)& ((arg1)->name);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Part *arg1 = (Part *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Part **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Part_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (strmod *)& ((arg1)->description);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Part *arg1 = (Part *) 0 ;
  std::vector< Request > *arg2 = (std::vector< Request > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Part **)&jarg1; 
  arg2 = *(std::vector< Request > **)&jarg2; 
  if (arg1) (arg1)->requests = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Part_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  std::vector< Request > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (std::vector< Request > *)& ((arg1)->requests);
  *(std::vector< Request > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Part_1machines_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Part *arg1 = (Part *) 0 ;
  MachinePart *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Part **)&jarg1; 
  arg2 = *(MachinePart **)&jarg2; 
  {
    size_t ii;
    MachinePart *b = (MachinePart *) arg1->machines;
    for (ii = 0; ii < (size_t)NUM_OF_MACHINES; ii++) b[ii] = *((MachinePart *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Part_1machines_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Part *arg1 = (Part *) 0 ;
  MachinePart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Part **)&jarg1; 
  result = (MachinePart *)(MachinePart *) ((arg1)->machines);
  *(MachinePart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Part_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Part *)new Part();
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (Part *)new Part(arg1,arg2,arg3,arg4);
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1Part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Part *arg1 = (Part *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Part **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordNode_1word_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  wordNode *arg1 = (wordNode *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordNode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->word = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mypackage_testJNI_wordNode_1word_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  wordNode *arg1 = (wordNode *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordNode **)&jarg1; 
  result = (std::string *) & ((arg1)->word);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordNode_1parts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  wordNode *arg1 = (wordNode *) 0 ;
  std::vector< Part * > *arg2 = (std::vector< Part * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(wordNode **)&jarg1; 
  arg2 = *(std::vector< Part * > **)&jarg2; 
  if (arg1) (arg1)->parts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_wordNode_1parts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  wordNode *arg1 = (wordNode *) 0 ;
  std::vector< Part * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordNode **)&jarg1; 
  result = (std::vector< Part * > *)& ((arg1)->parts);
  *(std::vector< Part * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordNode_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  wordNode *arg1 = (wordNode *) 0 ;
  wordNode *arg2 = (wordNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(wordNode **)&jarg1; 
  arg2 = *(wordNode **)&jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_wordNode_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  wordNode *arg1 = (wordNode *) 0 ;
  wordNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordNode **)&jarg1; 
  result = (wordNode *) ((arg1)->left);
  *(wordNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordNode_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  wordNode *arg1 = (wordNode *) 0 ;
  wordNode *arg2 = (wordNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(wordNode **)&jarg1; 
  arg2 = *(wordNode **)&jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_wordNode_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  wordNode *arg1 = (wordNode *) 0 ;
  wordNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordNode **)&jarg1; 
  result = (wordNode *) ((arg1)->right);
  *(wordNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1wordNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  wordNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (wordNode *)new wordNode();
  *(wordNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1wordNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  wordNode *arg1 = (wordNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wordNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1wordSearch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  wordSearch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (wordSearch *)new wordSearch();
  *(wordSearch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1wordSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  wordSearch *arg1 = (wordSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wordSearch **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_wordSearch_1searchPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  wordSearch *arg1 = (wordSearch *) 0 ;
  std::string arg2 ;
  std::vector< Part * > *arg3 = 0 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(wordSearch **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< Part * > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part * > & reference is null");
    return 0;
  } 
  result = (Part *)(arg1)->searchPart(arg2,*arg3);
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordSearch_1addPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  wordSearch *arg1 = (wordSearch *) 0 ;
  Part *arg2 = (Part *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(wordSearch **)&jarg1; 
  arg2 = *(Part **)&jarg2; 
  (arg1)->addPart(arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_wordSearch_1printTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  wordSearch *arg1 = (wordSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(wordSearch **)&jarg1; 
  (arg1)->printTree();
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_HASH_1TABLE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)HASH_TABLE_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Connection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Connection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Connection *)new Connection();
  *(Connection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1Connection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Connection *arg1 = (Connection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Connection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Connection_1addPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (Part *)(arg1)->addPart(arg2,arg3,arg4,arg5);
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Connection_1searchPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  int arg2 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Part *)(arg1)->searchPart(arg2);
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Connection_1findPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  int arg2 ;
  Part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Part *)(arg1)->findPart(arg2);
  *(Part **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_Connection_1editPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  Part *arg2 = (Part *) 0 ;
  int arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Part **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (bool)(arg1)->editPart(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1getReplacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  Connection *arg1 = (Connection *) 0 ;
  Part *arg2 = (Part *) 0 ;
  int arg3 ;
  int arg4 ;
  std::vector< Replacement * > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Part **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(std::vector< Replacement * > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Replacement * > & reference is null");
    return ;
  } 
  (arg1)->getReplacements(arg2,arg3,arg4,*arg5);
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_Connection_1addReplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (bool)(arg1)->addReplacement(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_Connection_1orderPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  Part *arg2 = (Part *) 0 ;
  int arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Part **)&jarg2; 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->orderPart(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1getRequests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Connection *arg1 = (Connection *) 0 ;
  std::vector< Request * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(std::vector< Request * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Request * > & reference is null");
    return ;
  } 
  (arg1)->getRequests(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_Connection_1placeOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  Request *arg2 = (Request *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Request **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->placeOrder(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mypackage_testJNI_Connection_1fulfillOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  Request *arg2 = (Request *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Request **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->fulfillOrder(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1getAllParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Connection *arg1 = (Connection *) 0 ;
  std::vector< Part * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(std::vector< Part * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Part * > & reference is null");
    return ;
  } 
  (arg1)->getAllParts(*arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1closeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Connection *arg1 = (Connection *) 0 ;
  Request *arg2 = (Request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Request **)&jarg2; 
  (arg1)->closeRequest(arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1printRequestQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Connection *arg1 = (Connection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  (arg1)->printRequestQueue();
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1printRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Connection *arg1 = (Connection *) 0 ;
  Request *arg2 = (Request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = *(Request **)&jarg2; 
  (arg1)->printRequest(arg2);
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Connection_1timeOpened_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Connection *arg1 = (Connection *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->timeOpened = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Connection_1timeOpened_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Connection *arg1 = (Connection *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Connection **)&jarg1; 
  result = (time_t) ((arg1)->timeOpened);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_MAX_1LOG_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MAX_LOG_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_MAX_1FILE_1AGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  result = (time_t)(time_t)MAX_FILE_AGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Save_1savTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Save *arg1 = (Save *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Save **)&jarg1; 
  arg2 = (time_t)jarg2; 
  if (arg1) (arg1)->savTime = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Save_1savTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Save *arg1 = (Save *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Save **)&jarg1; 
  result = (time_t) ((arg1)->savTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Save_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Save *arg1 = (Save *) 0 ;
  strmod *arg2 = (strmod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Save **)&jarg1; 
  arg2 = *(strmod **)&jarg2; 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_Save_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Save *arg1 = (Save *) 0 ;
  strmod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Save **)&jarg1; 
  result = (strmod *)& ((arg1)->filename);
  *(strmod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_Save_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Save *arg1 = (Save *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Save **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_mypackage_testJNI_Save_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Save *arg1 = (Save *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Save **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1Save(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Save *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Save *)new Save();
  *(Save **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Save *arg1 = (Save *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Save **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1SaveLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SaveLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SaveLog *)new SaveLog();
  *(SaveLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1SaveLog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  SaveLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (SaveLog *)new SaveLog(arg1);
  *(SaveLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1SaveLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SaveLog *arg1 = (SaveLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SaveLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_SaveLog_1printSaveHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SaveLog *arg1 = (SaveLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SaveLog **)&jarg1; 
  (arg1)->printSaveHistory();
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_SaveLog_1addSave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SaveLog *arg1 = (SaveLog *) 0 ;
  Save arg2 ;
  Save *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SaveLog **)&jarg1; 
  argp2 = *(Save **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Save");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addSave(arg2);
}


SWIGEXPORT jstring JNICALL Java_mypackage_testJNI_SaveLog_1loadSave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  SaveLog *arg1 = (SaveLog *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SaveLog **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->loadSave(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_SaveLog_1setDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SaveLog *arg1 = (SaveLog *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SaveLog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDir(arg2);
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_new_1SaveMethod(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  SaveMethod *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (SaveMethod *)new SaveMethod(arg1);
  *(SaveMethod **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_delete_1SaveMethod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SaveMethod *arg1 = (SaveMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SaveMethod **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_SaveMethod_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SaveMethod *arg1 = (SaveMethod *) 0 ;
  Connection arg2 ;
  Connection *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SaveMethod **)&jarg1; 
  argp2 = *(Connection **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Connection");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->save(arg2);
}


SWIGEXPORT jlong JNICALL Java_mypackage_testJNI_SaveMethod_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SaveMethod *arg1 = (SaveMethod *) 0 ;
  int arg2 ;
  Connection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SaveMethod **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->load(arg2);
  *(Connection **)&jresult = new Connection((const Connection &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mypackage_testJNI_SaveMethod_1printSaveHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SaveMethod *arg1 = (SaveMethod *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SaveMethod **)&jarg1; 
  (arg1)->printSaveHistory();
}


#ifdef __cplusplus
}
#endif

